"use strict";

var _ = require("dry-underscore");
var fstats = require('../lib');
var table_formatter = require('text-table');

var color = require('cli-color');

process.on('uncaughtException', _.exit);

var total_time = _.time("total time");

var log = _.log;
var log_level = "info";
var verbose = false;

function run(){

    var args = process.argv.slice(2);

    log.level(log_level);
    verbose = log.verbose();

    var err = null;

    var print_help = false;
    var read_only = false;
    var limit = false;
    var limit_n = null;

    args = _.filter(args, function(arg){
        if(_.lc(arg) === "-h"){ print_help = true; }
        else if(_.lc(arg) === "-ro"){ read_only = true; }
        else if(_.lc(arg) === "-n"){ limit = true; }
        else if(limit && limit_n === null){ 
            limit_n = _.n(arg);
            if(limit_n === null){ 
                _.stderr("-n takes an numeric argument. " + arg + " is not a number.");
                print_help = true;
            }
        }
        else{ return(true); }
    });

    if(print_help){ 
        _.stderr("usage: fstats [-h, -ro, -n [n]] [directory_name]");
        _.exit(1);
    }

    var root = _.path.cwd();

    if(args.length > 0){ root = _.last(args); }

    var fs = fstats({ root: root, read_only: read_only });

    await{ fs.compute(_.plumb(defer(var root_entry), _.exit)); }

    var table = [];

    add_root_data(root_entry, table);

    add_child_data(root_entry, table, limit_n);

    print_data(table);

    var time = total_time(true);

    if(time > 1000){
        time /= 1000;
        _.p("total time: ", _.decimals(time, 2, false) + " sec");
    }else{
        _.p("total time: ", _.decimals(time, 2, false) + " ms");
    }
}

function add_last_header(header){
    if(header.added_last){ return; }
    header.added_last = true;
    header.push("last");
    header.push("change");
}

function add_max_header(header){
    if(header.added_max){ return; }
    header.added_max = true;
    header.push("max");
    header.push("change");
};

function print_data(table){

    var t = table_formatter(table, { 
        align: [ 'l', 'r', 'r', 'r', 'r', 'r' ],
        stringLength: function(s) { return color.strip(s).length; }
    });

    _.p(t);
    _.p("");
}

function add_root_data(root_entry, table){

    var print_info = [
        { key: "link_count", name: "links:" },
        { key: "dir_count", name: "dirs:" },
        { key: "file_count", name: "files:" },
        { key: "allocated", name: "size:" },
    ];

    var root_data_header = ["", "current"];
    var stats = root_entry.pretty_stats();

    _.each(print_info, function(info, key){
        var stat = stats[info.key];
        add_stats_row(root_data_header, table, info.name, stat);
    });
    table.unshift(root_data_header);

}

function add_child_data(root_entry, table, limit){

    var child_data_header = ["", "current"];

    var children = root_entry.children();

    children.sort(function(a, b){
        if(a.stats().allocated > b.stats().allocated){ return(1); }
        else if(a.stats().allocated < b.stats().allocated){ return(-1); }
        else{ return(0); }
    });

    if(limit !== null){ children = _.last(children, limit); }

    var max_len = 0;
    _.each(children, function(child){
        max_len = _.max(max_len, child.name().length);
    });

    if(max_len > 0){ table.push([_.str.repeat("-", max_len)]); }

    _.each(children, function(child){
        add_stats_row(child_data_header, table, child.name(), child.pretty_stats()["allocated"]);
    });
    // child_data.unshift(child_data_header);

}

function add_stats_row(header, table, label, stat){

    var row = [label, stat.current.value.human];

    if(stat.last_run !== null){
        add_last_header(header);

        row.push(stat.last_run.value.human);

        if(stat.last_run.change.raw === 0){
            row.push("0");
        }else if(stat.last_run.change.raw > 0){
            row.push(color.green(stat.last_run.change.human));
        }else{
            row.push(color.red(stat.last_run.change.human));
        }
    }

    if(stat.max_run !== null){
        add_max_header(header);

        row.push(stat.max_run.value.human);

        if(stat.max_run.change.raw === 0){
            row.push("0");
        }else if(stat.max_run.change.raw > 0){
            row.push(color.green(stat.max_run.change.human));
        }else{
            row.push(color.red(stat.max_run.change.human));
        }
    }

    table.push(row);
}

exports.run = run;

