"use strict";

var _ = require('dry-underscore');

function entry(entry_info, parent, history){
    this.init_stats();
    this._children = [];
    this._info = entry_info;
    this._parent = parent || null;
    this._history = history || {};
};

entry.prototype.init_stats = function(){
    this._stats = {
        timestamp: _.timestamp(),
        dir_count: 0,
        file_count: 0,
        link_count: 0,
        size: 0,
        allocated: 0,
    };
};
entry.prototype.name = function(){ return(this._info.name); };
entry.prototype.path = function(){ return(this._info.path); };
entry.prototype.history = function(path){
    if(this.parent()){ return this.parent().history(path); }
    else{ return(this._history[path]); }
};
entry.prototype.stats = _.r("_stats");
entry.prototype.children = _.r("_children");

entry.prototype.parent = _.r("_parent");
entry.prototype.add_value = function(key, value){
    if(this.parent()){ this.parent().add_value(key, value); }
    this._stats[key] += value;
};

entry.prototype.compute = function(callback){
    var self = this;

    await{ _.fs.lstat_dir(self.path(), _.plumb(defer(var dir_entries), callback)); }

    var w = _.waiter();

    self.init_stats();
    self._children = [];

    _.each(dir_entries, function(dir_entry){
        var stat = dir_entry.stat;
        if(stat.isDirectory()){
            self.add_value("dir_count", 1);
            var stats_entry = new entry(dir_entry, self);
            self._children.push(stats_entry);
            stats_entry.compute(w.callback());
        }else{
            if(stat.isSymbolicLink()){ 
                self.add_value("link_count", 1);
            }else{
                self.add_value("file_count", 1);
            }
            self.add_value("size", stat.size);
            self.add_value("allocated", (stat.blocks * 512));
        }
    });

    await{ w.wait(_.plumb(defer(), callback)); }

    callback(null);
};

entry.prototype.pretty_stats = function(){

    var raw_stats = _.clone(this.stats());

    return((new pretty_stats(raw_stats, this.history(this.path()))).stats());
};

function pretty_stats(raw_stats, history){
    this._raw_stats = raw_stats;
    this._pretty_stats = {};
    this._history = history || [];

    this.add_value("file_count");
    this.add_value("dir_count");
    this.add_value("link_count");
    this.add_byte_value("allocated");
    this.add_byte_value("size");
};

pretty_stats.prototype.raw_stats = function(){ return(this._raw_stats); };
pretty_stats.prototype.stats = function(){ return(this._pretty_stats); };
pretty_stats.prototype.history = _.r("_history");
pretty_stats.prototype.last_run = function(){ return(_.first(this.history())); }

pretty_stats.prototype.add_value = function(key, to_human){
    var pretty_stat = { current: { value: { raw: this._raw_stats[key] } } };

    to_human = to_human || function(num){ return(_.format.number(num, { max: 2 })); };

    pretty_stat.current.value.human = to_human(pretty_stat.current.value.raw); 

    this.add_last_run(key, pretty_stat, to_human);
    this.add_max_run(key, pretty_stat, to_human);

    this._pretty_stats[key] = pretty_stat;

    return(this._pretty_stats[key]);
};

pretty_stats.prototype.add_byte_value = function(key){
    var pretty_stat = this.add_value(key, _.byte_units);
    return(pretty_stat);
};

pretty_stats.prototype.add_change_run = function(key, new_key, pretty_stat, diff, to_human){

    if(diff && diff[key] !== null && diff[key] !== undefined){
        pretty_stat[new_key] = { value : { raw: diff[key] } };
        pretty_stat[new_key].value.human = to_human(diff[key]);
        pretty_stat[new_key].change = { raw: _.round(pretty_stat.current.value.raw - diff[key], 2) };
        pretty_stat[new_key].change.human = to_human(pretty_stat[new_key].change.raw);
    }else{
        pretty_stat[new_key] = null;
    }
};

pretty_stats.prototype.add_last_run = function(key, pretty_stat, to_human){
    var last_run = this.last_run();
    this.add_change_run(key, "last_run", pretty_stat, last_run, to_human);
};

pretty_stats.prototype.add_max_run = function(key, pretty_stat, to_human){
    var history = _.concat(this.raw_stats(), this.history());
    var max_run = _.max(history, function(raw_stat){ return(raw_stat[key] || 0); });
    this.add_change_run(key, "max_run", pretty_stat, max_run, to_human);
};

function fstats(options){
    options = options || {};
    var root = options.root || _.path.cwd();

    this._root = root;
    this._read_only = (options.read_only === true);

    this.root = _.path.fun(_.path.normalize(root));

    this._history = {};

    this._storage_file_path = this.root(".fstats.json");

    this._stats = {};
}

fstats.prototype.history = _.rk("_history");

fstats.prototype.load_history = function(callback){
    var self = this;

    if(self._read_only){ return callback(); }

    await{ _.fs.read_json(self._storage_file_path, _.plumb(defer(var err, history), callback, _.code.noent)); }
    if(err){  self._history = {}; return callback(null); }

    function absolute_path(path){
        var abs_path = _.path.resolve(self.root(), path);
        return(abs_path);
    }

    var abs_history = {};
    _.each(history, function(path_history, path){
        abs_history[absolute_path(path)] = path_history;
    });

    self._history = abs_history;

    return callback(null);
};

fstats.prototype.save_history = function(root_entry, callback){
    if(this._read_only){ return callback(); }

    var history = _.jclone(this.history());

    if(!history[root_entry.path()]){ history[root_entry.path()] = []; }
    history[root_entry.path()].unshift(root_entry.stats());

    _.each(root_entry.children(), function(child){
        if(!history[child.path()]){ history[child.path()] = []; }
        history[child.path()].unshift(child.stats());
    });

    function relative_path(path){
        var rel_path = _.path.relative(root_entry.path(), path);
        return(rel_path ? rel_path : ".");
    }

    var relative_history = {};
    _.each(history, function(path_history, path){
        relative_history[relative_path(path)] = path_history;
    });

    await{ _.fs.write_json(this._storage_file_path, relative_history, _.plumb(defer(), callback)); }

    callback(null);
};


fstats.prototype.compute = function(callback){
    var self = this;

    await{ self.load_history(_.plumb(defer(), callback)); }

    var root_entry = new entry({ path: self.root(), name: _.path.base(self.root()) }, null, self.history());

    await{ root_entry.compute(_.plumb(defer(), callback)); }

    await{ self.save_history(root_entry, _.plumb(defer(), callback)); }

    callback(null, root_entry);
};

module.exports = function(options){ return(new fstats(options)); };
